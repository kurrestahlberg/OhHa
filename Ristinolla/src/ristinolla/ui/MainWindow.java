package ristinolla.ui;

import java.awt.BorderLayout;
import javax.sound.midi.ControllerEventListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.JOptionPane;

import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.File;

/**
 *
 * @author kestahlb
 */
public class MainWindow extends javax.swing.JFrame {

    private static final String SAVEFILENAME = "ristinolla.sav";
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        gameField = new GameView();
        getContentPane().add(gameField, BorderLayout.CENTER);
        pack();
        
        addWindowListener(new WindowListener() {
            @Override
            public void windowClosing(WindowEvent e) {
                if(exiting()) System.exit(0);
            }

            @Override
            public void windowOpened(WindowEvent we) {
            }

            @Override
            public void windowClosed(WindowEvent we) {
            }

            @Override
            public void windowIconified(WindowEvent we) {
            }

            @Override
            public void windowDeiconified(WindowEvent we) {
            }

            @Override
            public void windowActivated(WindowEvent we) {
            }

            @Override
            public void windowDeactivated(WindowEvent we) {
            }
           });
        
        checkForLoadGame();
    }
    
    private void checkForLoadGame() {
        File f = new File(SAVEFILENAME);
        if(f.exists()) {
            int rv = JOptionPane.showConfirmDialog(this, 
                    "There seems to be a saved game, would you like to load it?", 
                    "Load Game?", JOptionPane.YES_NO_OPTION);
            
            if(JOptionPane.YES_OPTION == rv) {
                try {

                    FileInputStream fis = new FileInputStream(f);
                    gameField.loadGame(fis);
                } catch (IOException e) {
                    //Can't read..
                }
            }
            
            f.delete();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        newGameButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));
        jPanel1.add(filler1);

        newGameButton.setText("New Game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });
        jPanel1.add(newGameButton);

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });
        jPanel1.add(quitButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        if(exiting()) System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        gameField.newGameDialogTriggered();
    }//GEN-LAST:event_newGameButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton newGameButton;
    private javax.swing.JButton quitButton;
    // End of variables declaration//GEN-END:variables

    private boolean exiting() {
        if(gameField.gameOver()) return true;
        
        int rv = JOptionPane.showConfirmDialog(this, 
                "The game is in progress, would you like to save it for later?", 
                "Save Game?", JOptionPane.YES_NO_CANCEL_OPTION);
        if(JOptionPane.YES_OPTION == rv) {
            try {
                gameField.saveGame(new FileOutputStream(SAVEFILENAME));
            } catch (IOException e) {

            }
        }
        
        if(JOptionPane.CANCEL_OPTION == rv) return false;
        return true;
    }
    
    private GameView gameField;
}

